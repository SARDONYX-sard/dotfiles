# vscode://file/$HOME/.gitconfig

[user]
#! Hard-coded the user name for UFN restriction.
#! You need to change it to your windows user name
  name = SARDONYX-sard
  email = 68905624+SARDONYX-sard@users.noreply.github.com
  signingkey = 2AC095678D950003!# gpg sign ID

[branch]
  sort = -committerdate
[core]
  autocrlf = false
  eol = lf
  editor = code
  # editor = nvim
  ignorecase = false
  pager = delta # need `delta` command
  quotepath = false
  safecrlf = true
  symlinks = true
[color]
  ui = auto
[column]
  ui = auto
[commit]
  verbose = true
[credential]
  helper = cache --timeout=300000
  username = SARDONYX-sard
[credential "https://github.com"] # Without this, every time we push, we will be prompted to select an account.
  helper = cache --timeout=300000
  # helper = !gh auth git-credential
[delta]
  navigate = true    # use n and N to move between diff sections
    # delta detects terminal colors automatically; set one of these to disable auto-detection
    # dark = true
    # light = true
[dif]
  tool = difftastic
[diff]
  algorithm = histogram
  colorMoved = plain
  mnemonicPrefix = true
  renames = true
[difftool]
  prompt = false
[difftool "difftastic"]
  cmd = difft "$LOCAL" "$REMOTE"
[pager]
  difftool = true
[http]
  postBuffer = 524288000
[init]
  defaultBranch = main
[merge]
  # conflictStyle = zdiff3 # Temporarily turned off because the git pkg of the Docker container is often less than 2.35.
  defaultToUpstream = true
[pack]
  windowMemory = 100m
  packSizeLimit = 100m
  threads = 1
[pull]
  autoSquash = true
  autoStash = true
  updateRefs = true
[push]
  default = simple
  autoSetupRemote = true
  followTags = true
[rebase]
  autoSquash = true
  autoStash = true
  updateRefs = true
  stat = true
[rerere]
  enabled = true
  autoupdate = true
[tag]
  sort = version:refname
[url "git@github.com:"] # http to ssh
  pushInsteadOf = git://github.com/
  pushInsteadOf = https://github.com/
[url "git://github.com/"] # Avoid git clone ssh hang up
  insteadOf = https://github.com/
[alias]                   # `!`: Meaning run an external command instead of a git subcommand.
  aa = add -A .# Staged all files.
  amend = commit --amend -m# Rewrite the latest commit message that has not been pushed
  # Show all aliases. (e.g. green_b= yellow_branch)
  alias = "!f() { if [ \"$#\" -eq 0 ]; then git config --get-regexp ^alias\\. | cut --delimiter="." --fields=2 ; return; fi; ret=0; for a in \"$@\"; do git config --get-regexp ^alias\\.\"$a\"$; rettmp=$?; if [ $rettmp != 0 ]; then ret=$rettmp; printf \"\\e[31malias.$a is not defined as alias\\n\\e[m\"; fi; done; return $ret; }; f"
  b = branch
  brd = branch -d
  cm = commit -m
  ch = checkout
  chb = checkout -b# Checkout & create a new branch.
  chf = !git fetch && git checkout# Check fetch
  cp = cherry-pick# Can bring in commits from another branch.
  # Multiple commits from different branches can be selected and brought in.
  df = "!f() { args=$@; [ -z \"$args\" ] && args=HEAD; ([ \"$args\" = \"HEAD\" ] && git status --short || git diff --name-status $args | sed 's/\t/  /')  | cut -c 4- | xargs git diff --color=always $args -- --multi --height 90% | cut -c 4-; }; f"
  delete-merged-branch = "!f() { branch=${1:-main}; git checkout main; git branch --merged|egrep -v '\\*|develop|main|master'|xargs --max-args=1 --no-run-if-empty git branch -d; };f"
  dfw = diff --word-diff# Display word-level differences in color.
  dlg = "!f() { GIT_EXTERNAL_DIFF=difft git log -p --ext-diff $@; }; f"
  edit = config --global --edit
  ffs = flow feature start
  fix = commit --fixup# Can fix any previous commit. (e.g. git fix <sha>)
  fixit = commit --amend --no-edit
  fush = push -f
  # Display log with graph.
  lg = log --graph --date=short --decorate=short --pretty=format:'%Cgreen%h %Creset%cd %Cblue%cn %Cred%d %Creset%s'
  lr = reflog# Log in order of [Sha]: [Offset from head]: [Commit message].
  mg = merge --no-ff
  # Create a Pull Request on the current branch.
  pr = !"start \"$(git remote get-url origin | sed 's/\\/git\\//\\//;s/\\.git$/\\/compare\\//')$(git config gitflow.branch.develop | tr -d \\\\r\\\\n)...$(git rev-parse --abbrev-ref HEAD | tr -d \\\\r\\\\n)?expand=1\""
  ps = !git push origin $(git branch --show-current)# Push to remote branch t with same name as current branch.
  rb = rebase
  rba = rebase --abort
  rbc = rebase --continue
  rbs = rebase --skip
  rv = revert# Commit to revert changes.
  sa = stash apply# Apply saved changes (do not delete saved stashes).
  # Preview patches also in stash list.(require fzf)
  sl = !git stash list | fzf --preview 'echo {} | grep -o stash@{.*} | xargs git stash show -p --color=always' --height 90% | grep -o stash@{.*}
  sp = stash pop# Delete the saved stash and apply the saved changes.
  spa = !git sl | xargs git stash apply# Apply after preview.
  spd = !git sl | xargs git stash drop# Drop after preview.
  st = status
  stl = lfs status# Check Git LFS(Large File Storage) status.(Pre-execution of `git lfs install` is required.)
  stt = status -uno# Display status of files other than Untracked files.
  sv = stash push --include-untracked# Save all uncommitted files.
  # Delete all merged branches that are not in remote.
  sync = "!prev_branch=$(git rev-parse --abbrev-ref HEAD); git stash -u && git switch main && git fetch -p && git pull && git push origin --tags && git delete-merged-branch && [ -z \"$(git status --porcelain)\" ] || git stash pop || git switch $prev_branch"
  undo = reset HEAD~1
  unstage = reset# unstaged all files.
[credential "helperselector"]
  selected = manager
